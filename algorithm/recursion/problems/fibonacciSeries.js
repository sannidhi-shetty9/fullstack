/*
The Fibonacci series is a sequence of numbers in which each number (known as a Fibonacci number) is the sum of the two preceding ones. The sequence typically starts with 0 and 1, and subsequent numbers are generated by adding the last two numbers in the sequence. Mathematically, the Fibonacci sequence can be defined as:

F(0) = 0
F(1) = 1
F(n) = F(n - 1) + F(n - 2) for n > 1

The first few numbers in the Fibonacci sequence are: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...

Here's a simple JavaScript function to generate the nth Fibonacci number using recursion:
*/

function fibonacci(n, arr=[]) {
  if (n <= 0) {
    arr.push(1)
    return 0;
  } else if (n === 1) {
    arr.push(1)
    return 1;
  } else {
    const res = fibonacci(n - 1) + fibonacci(n - 2);
    arr.push(res);
    return res;
  }
}

console.log(fibonacci(6)); // Output: 8 (Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8)


// However, this recursive approach is not very efficient for large values of `n` because it involves redundant calculations. A more efficient approach is to use memoization or dynamic programming to store previously computed Fibonacci numbers and avoid recalculating them. Here's an example of a memoized Fibonacci function in JavaScript:

function fibonacciMemo(n, memo = {}) {
  if (n in memo) {
    arr.push(memo[n])
    return memo[n];
  }

  if (n <= 0) {
    arr.push(1)
    return 0;
  } else if (n === 1) {
    arr.push(1)
    return 1;
  } else {
    memo[n] = fibonacciMemo(n - 1, memo) + fibonacciMemo(n - 2, memo);
    arr.push(memo[n])
    return memo[n];
  }
}

const arr=[]
console.log(fibonacciMemo(6, arr)); // Output: 8 (Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8)
console.log(arr)

// This memoized version stores previously computed Fibonacci numbers in the `memo` object, reducing the number of redundant calculations and improving the performance for larger values of `n`.