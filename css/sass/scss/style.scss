// SCSS (Sassy CSS) is a superset of CSS that brings additional features and enhancements to the standard CSS syntax. It's part of the Sass (Syntactically Awesome Style Sheets) language and provides a more concise and powerful way to write and organize your styles. SCSS files use the `.scss` file extension.

// Here are some of the key features of SCSS:

// 1. Variables: You can define variables in SCSS to store and reuse values like colors, font sizes, and more. This can make your styles more consistent and easier to update.

$primary-color: #3498db;

.button {
  background-color: $primary-color;
}

// 2. Nesting: You can nest CSS selectors within each other, which can help improve the organization and readability of your styles.

.nav {
  ul {
    list-style: none;
  }
  li {
    padding: 5px;
  }
}

// 3. Mixins: Mixins are reusable blocks of styles that you can include in multiple places. They allow you to encapsulate and reuse complex styles.

@mixin border-radius($radius) {
  border-radius: $radius;
}

.button {
  @include border-radius(5px);
}

// 4. Partials: SCSS allows you to break your styles into smaller, manageable files called partials. These files start with an underscore `_` and can be imported into your main SCSS file.
// 5. Import: You can use the `@import` directive to include other SCSS or CSS files, helping you organize your styles into different modules.
// 6. Operators: SCSS supports arithmetic operations and provides a way to calculate values.

$base-padding: 10px;

.element {
  padding: $base-padding * 2;
}

// 7. Extends: The `@extend` directive allows you to share a set of properties from one selector to another, which can help reduce duplicated code.

.button {
  border: 1px solid #ccc;
  padding: 10px;
}

.submit-button {
  @extend .button;
  background-color: #3498db;
}

// 8. Functions: SCSS provides built-in functions for manipulating values, such as `lighten()`, `darken()`, and more.
// 9. Control Directives: You can use control directives like `@if`, `@for`, and `@each` to create more dynamic styles based on conditions or iterations.
// SCSS files need to be compiled into regular CSS to be used in web development. There are various tools and build systems that can handle the compilation process, including Node.js-based build tools, task runners like Gulp, and online tools.
// Overall, SCSS enhances the capabilities of traditional CSS, making it more efficient, maintainable, and expressive.